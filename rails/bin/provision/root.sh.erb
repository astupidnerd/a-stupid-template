#!/bin/bash

#
# ────────────────────────────────────────────────────────────────────────────────────  ──────────
#   :::::: H O W   T O   U S E   T H I S   S C R I P T : :  :   :    :     :        :          :
# ──────────────────────────────────────────────────────────────────────────────────────────────
#

# Copy this script (root.sh) and the deploy user script (deploy.sh) to the same
# directory on the server you want to provision, then run this script.
#
# Check out the source, or run this script with -h or --help to see how to use it.
#
# This script is not intended to be exactly what you need to use for a production
# environment, it is just a start.
#
# Edit this script, add to it, delete it, or do whatever works best for you.




#
# ──────────────────────────────────────────────────────────────────── I ──────────
#   :::::: D E F A U L T   V A L U E S : :  :   :    :     :        :          :
# ──────────────────────────────────────────────────────────────────────────────
#

VERSION="<%= VERSION %>"
APP_NAME="<%= app_name %>"
DEPLOY_USER="<%= deploy_user %>"
RUBY_VERSION="<%= ruby_version %>"
HOST_NAME="example.com"
GENERATE_SELF_SIGNED_CERT=n

# These are randomly generated passwords. If you need to have a specific password,
# then you should pass that value as a parameter to the script.
#
# If you do change them here, DO NOT COMMIT IT TO YOUR VERSION CONTROL!!!
DEPLOY_PASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
DEPLOY_DATABASE_PASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
APP_DATABASE_PASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)


#
# ──────────────────────────────────────────────────────────────────────── II ──────────
#   :::::: H E L P E R   F U N C T I O N S : :  :   :    :     :        :          :
# ──────────────────────────────────────────────────────────────────────────────────
#

#
# ─── SCRIPT INIT ────────────────────────────────────────────────────────────────
#

# Many thanks to Robert Siemer for his valuable SO answer:
# https://stackoverflow.com/a/29754866/2990656

# saner programming env: these switches turn some bugs into errors
set -o pipefail -o noclobber -o nounset

# Used to find the script to run as the deploy user.
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"


show_help() {
cat << EOF
Usage: $0 [options...][-h|--help][-v|--version]

Flags:
  -h, --help            Show this help message
  -v, --version         Show the version of this provision script.
  -g, --generate-cert   Generates a self signed cert for nginx.

Note: if you don't use the generated SSL cert, then you will have to
set it up yourself.

With no options given, the defaults used by this provision script are:

  App Name................. ${APP_NAME}
  Deploy User.............. ${DEPLOY_USER}
  Ruby Version............. ${RUBY_VERSION}
  Host Name................ ${HOST_NAME}
  Deploy Password.......... [randomly generated]
  Deploy Database Password. [randomly generated]
  App Database Password.... [randomly generated]

These can be set with --option=value where the options are:

  -n, --app-name                  The name of the app.
  -u, --deploy-user               The name of the deploy user.
  -r, --ruby-version              The version of ruby to use.
  -p, --deploy-password           The password for the deploy user.
  -d, --deploy-database-password  The postgresql password.
  -a, --app-database-password     The postgresql password for the app.
  -o, --host-name                 The nginx host name to use.

EOF
}

show_version() {
  echo "$0 Version ${VERSION}"
}

# Outputs a nice, centered, bright cyan banner.
banner_color="1;36"
banner() {
  local terminal_width="$(tput cols)"
  local padding="$(printf '%0.1s' ={1..500})"
  printf '\e[%sm%*.*s \e[0m%s\e[%sm %*.*s\e[0m\n' "${banner_color}" 0 "$(((terminal_width-2-${#1})/2))" "$padding" "${1^^}" "${banner_color}" 0 "$(((terminal_width-1-${#1})/2))" "$padding"
}

get_stack() {
   STACK=""
   local i message="${1:-""}"
   local stack_size=${#FUNCNAME[@]}
   # to avoid noise we start with 1 to skip the get_stack function
   for (( i=1; i<$stack_size; i++ )); do
      local func="${FUNCNAME[$i]}"
      [ x$func = x ] && func=MAIN
      local linen="${BASH_LINENO[$(( i - 1 ))]}"
      local src="${BASH_SOURCE[$i]}"
      [ x"$src" = x ] && src=non_file_source

      STACK+=$'\n'"   at: "$func" "$src" "$linen
   done
   STACK="${message}${STACK}"
}


assert_success() {
  if [ $? -ne 0 ]; then
    printf "\n\e[1;31m(failed)\e[0m $1"
    get_stack
    echo "${STACK}"
    exit 1
  fi
}

run_cmd() {
  printf "\n\e[1;33m(running)\e[0m $*\n"
  eval "$*"
  assert_success "$*"
}

run_deploy_cmd() {
  printf "\n\e[1;33m(running)\e[0m $*\n"
  eval "sudo -u ${DEPLOY_USER} -i $*"
  assert_success "$*"
}


#
# ──────────────────────────────────────────────────────────────────── III ──────────
#   :::::: O P T I O N   P A R S I N G : :  :   :    :     :        :          :
# ──────────────────────────────────────────────────────────────────────────────
#



OPTIONS=n:u:r:p:d:a:vhgo:
LONGOPTS=app-name:,deploy-user:,ruby-version:,deploy-password:,deploy-database-password:,app-database-password:,version,help,generate-cert,host-name:

# -use ! and PIPESTATUS to get exit code with errexit set
# -temporarily store output to be able to check for errors
# -activate quoting/enhanced mode (e.g. by writing out “--options”)
# -pass arguments only via   -- "$@"   to separate them correctly
! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    # e.g. return value is 1
    #  then getopt has complained about wrong arguments to stdout
    exit 2
fi
# read getopt’s output this way to handle the quoting right:
eval set -- "$PARSED"

d=n f=n v=n outFile=-
# now enjoy the options in order and nicely split until we see --
while true; do
    case "$1" in
        -n|--app-name)
          APP_NAME="$2"
          shift 2
          ;;
        -u|--deploy-user)
          DEPLOY_USER="$2"
          shift 2
          ;;
        -r|--ruby-version)
          RUBY_VERSION="$2"
          shift 2
          ;;
        -p|--deploy-password)
          DEPLOY_PASSWORD="$2"
          shift 2
          ;;
        -d|--deploy-database-password)
          DEPLOY_DATABASE_PASSWORD="$2"
          shift 2
          ;;
        -a|--app-database-password)
          APP_DATABASE_PASSWORD="$2"
          shift 2
          ;;
        -g|--generate-cert)
          GENERATE_SELF_SIGNED_CERT=y
          shift
          ;;
        -o|--host-name)
          HOST_NAME="$2"
          shift 2
          ;;
        -v|--version)
          show_version
          exit 0
          ;;
        -h|--help)
          show_help
          exit 0
          ;;
        --)
            shift
            break
            ;;
        *)
            echo "Programming error"
            exit 3
            ;;
    esac
done

#
# ────────────────────────────────────────────────────────────────────────── IV ──────────
#   :::::: D E P L O Y   U S E R   S E T U P : :  :   :    :     :        :          :
# ────────────────────────────────────────────────────────────────────────────────────
#


banner "creating ${DEPLOY_USER} user"

id -u "${DEPLOY_USER}" &> /dev/null

if [ $? -ne 0 ]; then
  run_cmd 'useradd -m -p $(openssl passwd -1 "$DEPLOY_PASSWORD") "${DEPLOY_USER}" -s /bin/bash'
fi

cat /etc/sudoers | grep -q "^${DEPLOY_USER} ALL" &> /dev/null
if [ $? -ne 0 ]; then
  run_cmd 'echo "${DEPLOY_USER} ALL=(ALL) NOPASSWD: ALL" | tee -a /etc/sudoers > /dev/null'
fi

run_cmd 'echo "${DEPLOY_USER}:${DEPLOY_PASSWORD}" | chpasswd &> /dev/null'

if [ ! -e "/home/${DEPLOY_USER}/apps/${APP_NAME}/shared/log/" ]; then
  run_cmd mkdir -p "/home/${DEPLOY_USER}/apps/${APP_NAME}/shared/log/"
  run_cmd chown -R "${DEPLOY_USER}:${DEPLOY_USER}" "/home/${DEPLOY_USER}"
fi

#
# ──────────────────────────────────────────────────────────────────────────────── V ──────────
#   :::::: I N S T A L L   D E P E N D E N C I E S : :  :   :    :     :        :          :
# ──────────────────────────────────────────────────────────────────────────────────────────
#
banner "installing dependencies"

# Postgresql 11
run_cmd wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
RELEASE=$(lsb_release -cs)
run_cmd 'echo "deb http://apt.postgresql.org/pub/repos/apt/ ${RELEASE}"-pgdg main | sudo tee  /etc/apt/sources.list.d/pgdg.list'

# Node
run_cmd 'curl -sL https://deb.nodesource.com/setup_10.x -o nodesource_setup.sh | bash'

# Yarn
run_cmd 'curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -'
run_cmd 'echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list'

run_cmd sudo apt-get update
run_cmd sudo apt-get install -y autoconf bison build-essential libssl-dev libyaml-dev libreadline6-dev zlib1g-dev libncurses5-dev libffi-dev libgdbm5 libgdbm-dev git postgresql-11 nodejs yarn nginx libpq-dev

#
# ────────────────────────────────────────────────────────────── VI ──────────
#   :::::: N G I N X   S E T U P : :  :   :    :     :        :          :
# ────────────────────────────────────────────────────────────────────────
#

[ -e /etc/nginx/sites-enabled/default ] && run_cmd rm /etc/nginx/sites-enabled/default
[ -e /etc/nginx/sites-available/default ] && run_cmd rm /etc/nginx/sites-available/default

[ -e "/home/${DEPLOY_USER}/apps/${APP_NAME}/shared/log/" ] || run_cmd mkdir -p "/home/${DEPLOY_USER}/apps/${APP_NAME}/shared/log/"

if [ "$GENERATE_SELF_SIGNED_CERT" = y ]; then

[ -f //etc/ssl/certs/nginx-selfsigned.crt ] || run_cmd 'echo -e "\n\n\n\n\n\n" | openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/nginx-selfsigned.key -out /etc/ssl/certs/nginx-selfsigned.crt'

[ -e /etc/nginx/dhparam.pem ] || run_cmd openssl dhparam -dsaparam -out /etc/nginx/dhparam.pem 4096

if [ ! -f /etc/nginx/self-signed.conf ]; then
  run_cmd "echo 'ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;' > /etc/nginx/snippets/self-signed.conf"
  run_cmd "echo 'ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;' >> /etc/nginx/snippets/self-signed.conf"
fi

if [ ! -f /etc/nginx/snippets/ssl-params.conf ]; then
  run_cmd "echo 'ssl_protocols TLSv1.2;
ssl_prefer_server_ciphers on;
ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
ssl_ecdh_curve secp384r1; # Requires nginx >= 1.1.0
ssl_dhparam /etc/nginx/dhparam.pem;
ssl_session_timeout  10m;
ssl_session_cache shared:SSL:10m;
ssl_session_tickets off; # Requires nginx >= 1.5.9
ssl_stapling on; # Requires nginx >= 1.3.7
ssl_stapling_verify on; # Requires nginx => 1.3.7
resolver 8.8.8.8 8.8.4.4 valid=300s;
resolver_timeout 5s;
# Disable strict transport security for now. You can uncomment the following
# line if you understand the implications.
# add_header Strict-Transport-Security \"max-age=63072000; includeSubDomains; preload\";
add_header X-Frame-Options DENY;
add_header X-Content-Type-Options nosniff;
add_header X-XSS-Protection \"1; mode=block\";' > /etc/nginx/snippets/ssl-params.conf"
fi

if [ ! -f "/etc/nginx/sites-available/${APP_NAME}" ]; then
  run_cmd "echo '
upstream puma {
  server unix:///home/${DEPLOY_USER}/apps/${APP_NAME}/shared/tmp/sockets/${APP_NAME}-puma.sock;
}

server {
  listen 80 default_server deferred;
  rewrite ^(.*) https://\$host\$1 permanent;
}


server {
  listen 443 ssl;
  listen [::]:443 ssl;
  include snippets/self-signed.conf;
  include snippets/ssl-params.conf;

  server_name ${HOST_NAME};
  
  root /home/${DEPLOY_USER}/apps/${APP_NAME}/current/public;
  access_log /home/${DEPLOY_USER}/apps/${APP_NAME}/shared/log/nginx.access.log;
  error_log /home/${DEPLOY_USER}/apps/${APP_NAME}/shared/log/nginx.error.log info;

  location ^~ /assets/ {
    gzip_static on;
    expires max;
    add_header Cache-Control public;
  }
    
  try_files \$uri/index.html \$uri @puma;
  location @puma {
    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    proxy_set_header Host \$http_host;
    proxy_redirect off;
    proxy_set_header   X-Forwarded-Proto https;

    proxy_pass http://puma;
  }

  location /cable {
    proxy_pass http://puma;
    proxy_http_version 1.1;
    proxy_set_header Upgrade websocket;
    proxy_set_header Connection Upgrade;
  }

  error_page 500 502 503 504 /500.html;
  client_max_body_size 10M;
  keepalive_timeout 10;
  
  send_timeout 300; 
  proxy_read_timeout 300;
}
' > '/etc/nginx/sites-available/<%= app_name %>'"
fi

else

if [ ! -f "/etc/nginx/sites-available/${APP_NAME}" ]; then
  run_cmd "echo '
upstream puma {
  server unix:///home/${DEPLOY_USER}/apps/${APP_NAME}/shared/tmp/sockets/${APP_NAME}-puma.sock;
}

server {
  listen 80 default_server deferred;
  rewrite ^(.*) https://\$host\$1 permanent;
}


server {
  listen 443 ssl;
  listen [::]:443 ssl;

  server_name ${HOST_NAME};
  
  root /home/${DEPLOY_USER}/apps/${APP_NAME}/current/public;
  access_log /home/${DEPLOY_USER}/apps/${APP_NAME}/shared/log/nginx.access.log;
  error_log /home/${DEPLOY_USER}/apps/${APP_NAME}/shared/log/nginx.error.log info;

  location ^~ /assets/ {
    gzip_static on;
    expires max;
    add_header Cache-Control public;
  }
    
  try_files \$uri/index.html \$uri @puma;
  location @puma {
    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    proxy_set_header Host \$http_host;
    proxy_redirect off;
    proxy_set_header   X-Forwarded-Proto https;

    proxy_pass http://puma;
  }

  location /cable {
    proxy_pass http://puma;
    proxy_http_version 1.1;
    proxy_set_header Upgrade websocket;
    proxy_set_header Connection Upgrade;
  }

  error_page 500 502 503 504 /500.html;
  client_max_body_size 10M;
  keepalive_timeout 10;
  
  send_timeout 300; 
  proxy_read_timeout 300;
}
' > '/etc/nginx/sites-available/<%= app_name %>'"
fi

fi

[ -f "/etc/nginx/sites-enabled/${APP_NAME}" ] || run_cmd ln -s "/etc/nginx/sites-available/${APP_NAME}" "/etc/nginx/sites-enabled/${APP_NAME}"

systemctl restart nginx.service

#
# ──────────────────────────────────────────────────────────────────── VII ─────────
#   :::::: D A T A B A S E   S E T U P : :  :   :    :     :        :          :
# ──────────────────────────────────────────────────────────────────────────────
#

banner "database setup"

sudo -u postgres bash -c "psql postgres -tAc \"SELECT 1 FROM pg_roles WHERE rolname='${DEPLOY_USER}'\" | grep -q 1"
if [[ $? -ne 0 ]] ; then
  run_cmd "sudo -u postgres bash -c \"psql -c \\\"CREATE USER ${DEPLOY_USER} WITH PASSWORD '$DEPLOY_DATABASE_PASSWORD' SUPERUSER;\\\"\""
fi

sudo -u postgres bash -c "psql postgres -tAc \"SELECT 1 FROM pg_roles WHERE rolname='${APP_NAME}'\" | grep -q 1"
if [[ $? -ne 0 ]] ; then
  run_cmd "sudo -u postgres bash -c \"psql -c \\\"CREATE USER $APP_NAME with PASSWORD '$APP_DATABASE_PASSWORD' SUPERUSER;\\\"\""
fi

sudo -u postgres bash -c "psql postgres -tAc \"SELECT 1 FROM pg_database WHERE datname = '${APP_NAME}_production'\" | grep -q 1"
if [[ $? -ne 0 ]] ; then
  run_cmd "sudo -u postgres bash -c \"psql -c \\\"CREATE DATABASE ${APP_NAME}_production;\\\"\""
  run_cmd "sudo -u postgres bash -c \"psql -c \\\"GRANT ALL PRIVILEGES ON DATABASE ${APP_NAME}_production to ${DEPLOY_USER};\\\"\""
  run_cmd "sudo -u postgres bash -c \"psql -c \\\"GRANT ALL PRIVILEGES ON DATABASE ${APP_NAME}_production to $APP_NAME;\\\"\""
fi

run_cmd "sudo -u postgres bash -c \"psql -c \\\"ALTER USER ${DEPLOY_USER} WITH PASSWORD '$DEPLOY_DATABASE_PASSWORD' SUPERUSER;\\\"\""
run_cmd "sudo -u postgres bash -c \"psql -c \\\"ALTER USER ${APP_NAME} WITH PASSWORD '$APP_DATABASE_PASSWORD' SUPERUSER;\\\"\""

#
# ──────────────────────────────────────────────────────────────────────────── VIII ─────────
#   :::::: D E P L O Y   U S E R   S C R I P T : :  :   :    :     :        :          :
# ──────────────────────────────────────────────────────────────────────────────────────
#

banner "${DEPLOY_USER}'s script"

run_deploy_cmd "${DIR}/deploy.sh" --deploy-user="'${DEPLOY_USER}'" --ruby-version="'${RUBY_VERSION}'"

#
# ──────────────────────────────────────────────────────── IX ──────────
#   :::::: F I N I S H E D : :  :   :    :     :        :          :
# ──────────────────────────────────────────────────────────────────
#



banner "finished"

printf "\e[0m"

echo "Application Name: ${APP_NAME}"
echo "Deploy User: ${DEPLOY_USER}"
echo "Deploy User's Password: ${DEPLOY_PASSWORD}"
echo "Deploy's Postgresql Password: ${DEPLOY_DATABASE_PASSWORD}"
echo "Application's Postgresql Password: ${APP_DATABASE_PASSWORD}"
